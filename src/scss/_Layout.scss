/* // note about counter-clock-wise from portrait
export const orientationNumberMap = {
    "portrait-primary": 0, // as 0deg, aka. 360deg
    "landscape-primary": 1, // as -90deg, aka. 270deg
    "portrait-secondary": 2, // as -180deg, aka. 180deg
    "landscape-secondary": 3 // as -270deg, aka. 90deg
}
*/

/* // also from landscape basis (by counter-wise)
export const orientationNumberMap = {
    "landscape-primary": 0, // as 0deg, aka. -360deg
    "portrait-primary": 1, // as 90deg, aka. -270deg
    "landscape-secondary": 2, // as 180deg, aka. -180deg
    "portrait-secondary": 3, // as 270deg, aka. -90deg
}
*/



/* //orient coordinate swap (if counter-clock-size)
    0: [ x,  y],
    1: [ y, -x],
    2: [-x, -y],
    3: [-y,  x]
*/

/* //orient coordinate swap (if clock-size)
    0: [ x,  y],
    1: [-y,  x], // swapped
    2: [-x, -y],
    3: [ y, -x]  // swapped
*/



//
@use "lib/LogicFb" as flg;
@use "lib/LogicSign" as slg;

//
@use "lib/Logic" as lg;

//
@mixin compute_os_conditions {
    // reversion condition
    @supports (opacity: sign(0.5)) {
        --in-rev-cond-x: calc(1 - #{lg.lor(slg.eq(var(--orient, 0), 0), slg.eq(var(--orient, 0), 1))} );
        --in-rev-cond-y: calc(1 - #{lg.lor(slg.eq(var(--orient, 0), 0), slg.eq(var(--orient, 0), 3))} );
    }

    // reversion condition (alt)
    @supports not (opacity: sign(0.5)){
        --in-rev-cond-x: calc(1 - #{lg.lor(flg.eq(var(--orient, 0), 0), flg.eq(var(--orient, 0), 1))} );
        --in-rev-cond-y: calc(1 - #{lg.lor(flg.eq(var(--orient, 0), 0), flg.eq(var(--orient, 0), 3))} );
    }

    //
    & { // compute swap condition
        --in-swap-cond: rem(var(--orient, 0), 2); // for coordinate swap condition

        // compute as negate coefficient
        --in-rev-vx: calc(var(--in-rev-cond-x, 1) * -2 + 1);
        --in-rev-vy: calc(var(--in-rev-cond-y, 1) * -2 + 1);
    }
}

//
@mixin native-optimized-swap-in-portrait {
    & { --in-swap-cond: 0; };
    @media (orientation: portrait) { --in-swap-cond: 0; };
    @media (orientation: landscape) { --in-swap-cond: 1; };
}

//
@mixin compute_os_size_to_cs {
    // size swapping
    & { //
        --cs-size-x: #{lg.mix(var(--os-size-x, 100cqb), var(--os-size-y, 100cqi), var(--in-swap-cond, 0))};
        --cs-size-y: #{lg.mix(var(--os-size-y, 100cqi), var(--os-size-x, 100cqb), var(--in-swap-cond, 0))};

        //
        --cs-self-size-x: #{lg.mix(var(--os-self-size-y, 100cqb), var(--os-self-size-x, 100cqi), var(--in-swap-cond, 0))};
        --cs-self-size-y: #{lg.mix(var(--os-self-size-x, 100cqi), var(--os-self-size-y, 100cqb), var(--in-swap-cond, 0))};
    }
}

//
@mixin compute_cs_size_to_os {
    // size swapping
    & { //
        --os-size-x: #{lg.mix(var(--cs-size-x, 100cqb), var(--cs-size-y, 100cqi), var(--in-swap-cond, 0))};
        --os-size-y: #{lg.mix(var(--cs-size-y, 100cqi), var(--cs-size-x, 100cqb), var(--in-swap-cond, 0))};

        //
        --os-self-size-x: #{lg.mix(var(--cs-self-size-y, 100cqb), var(--cs-self-size-x, 100cqi), var(--in-swap-cond, 0))};
        --os-self-size-y: #{lg.mix(var(--cs-self-size-x, 100cqi), var(--cs-self-size-y, 100cqb), var(--in-swap-cond, 0))};
    }
}



// conversion from virtual space to client space by orientation
@mixin compute_from_os_to_cs {

    //
    & { // component swap condition
        --in-inset-x: #{lg.mix(var(--os-inset-x, 0px), var(--os-inset-y, 0px), var(--in-swap-cond, 0))};
        --in-inset-y: #{lg.mix(var(--os-inset-y, 0px), var(--os-inset-x, 0px), var(--in-swap-cond, 0))};

        //
        --in-drag-x: #{lg.mix(var(--os-drag-x, 0px), var(--os-drag-y, 0px), var(--in-swap-cond, 0))};
        --in-drag-y: #{lg.mix(var(--os-drag-y, 0px), var(--os-drag-x, 0px), var(--in-swap-cond, 0))};
    }

    // as alternative, you can swap before with os-size
    & { // inset position with reverse
        --cs-inset-x: #{lg.mix(var(--in-inset-x, 0px), calc(var(--cs-size-x, 100cqi) - var(--in-inset-x, 0px)), var(--in-rev-cond-x, 0))};
        --cs-inset-y: #{lg.mix(var(--in-inset-y, 0px), calc(var(--cs-size-y, 100cqb) - var(--in-inset-y, 0px)), var(--in-rev-cond-y, 0))};

        // drag offset with reversion
        --cs-drag-x: calc(var(--in-drag-x, 0px) * var(--in-rev-vx, 1));
        --cs-drag-y: calc(var(--in-drag-y, 0px) * var(--in-rev-vy, 1));
    }

}

// conversion from client space to virtual space by orientation
@mixin compute_from_cs_to_os {

    // as alternative, you can swap with os-size after
    & { // component swap condition
        --in-inset-x: #{lg.mix(var(--cs-inset-x, 0px), calc(var(--cs-size-x, 100cqi) - var(--cs-inset-x, 0px)), var(--in-rev-cond-x, 0))};
        --in-inset-y: #{lg.mix(var(--cs-inset-y, 0px), calc(var(--cs-size-y, 100cqi) - var(--cs-inset-y, 0px)), var(--in-rev-cond-y, 0))};

        //
        --in-drag-x: calc(var(--cs-drag-x, 0px) * var(--in-rev-vx, 1));
        --in-drag-y: calc(var(--cs-drag-y, 0px) * var(--in-rev-vy, 1));
    }

    // reverse for orientation space
    & {
        --os-inset-x: #{lg.mix(var(--in-inset-x, 0px), var(--in-inset-y, 0px), var(--in-swap-cond, 0))};
        --os-inset-y: #{lg.mix(var(--in-inset-y, 0px), var(--in-inset-x, 0px), var(--in-swap-cond, 0))};

        //
        --os-drag-x: #{lg.mix(var(--in-drag-y, 0px), var(--in-drag-x, 0px), var(--in-swap-cond, 0))};
        --os-drag-y: #{lg.mix(var(--in-drag-x, 0px), var(--in-drag-y, 0px), var(--in-swap-cond, 0))};
    }

}



// relative from main orientation
// for inline/block layouts
// rotate layout by clock-wise
// also, only for LTR layouts
@mixin prop-0deg   { --wm: horizontal-tb; --dir: ltr; --rot: 0deg; --i-rot: 0deg; } // default
@mixin prop-90deg  { --wm: vertical-rl;   --dir: ltr; --rot: 0deg; --i-rot: 0deg; }
@mixin prop-180deg { --wm: horizontal-tb; --dir: ltr; --rot: 180deg; --i-rot: 180deg; }
@mixin prop-270deg {
                                        & { --wm: vertical-lr; --dir: rtl; --rot: 0deg; --i-rot: 180deg; }
    @supports(writing-mode: sideways-lr)  { --wm: sideways-lr; --dir: ltr; --rot: 0deg; --i-rot: 0deg; }
}

// in client-space, depends of writing-mode...
@mixin portrait-size {
                                    & { --cqi: 100cqi; --cqb: 100cqb; }
    @media (orientation: portrait)    { --cqi: 100cqi; --cqb: 100cqb; }
    @media (orientation: landscape)   { --cqi: 100cqb; --cqb: 100cqi; }
}

// in client-space, depends of writing-mode...
@mixin landscape-size {
                                    & { --cqi: 100cqi; --cqb: 100cqb; }
    @media (orientation: landscape)   { --cqi: 100cqi; --cqb: 100cqb; }
    @media (orientation: portrait)    { --cqi: 100cqb; --cqb: 100cqi; }
}



//
@mixin init-os-size-by-native {
    --os-size-x: var(--cqi, 100cqi);
    --os-size-y: var(--cqb, 100cqb);
}

// in client-space, without writing-mode...
@mixin init-cs-size {
    --cs-size-x: 100cqw; //100cqi
    --cs-size-y: 100cqh; //100cqb
}



//
@mixin centered-self($transforms: null) {
    transform-origin: 0% 0%;
    transform: 
        #{$transforms}
        scale3d(var(--scale, 1), var(--scale, 1), var(--scale, 1)) 
        translate3d(
            round(nearest, calc(var(--translate-x, 0px) - 50%), calc(1px / var(--pixel-ratio, 1))),
            round(nearest, calc(var(--translate-y, 0px) - 50%), calc(1px / var(--pixel-ratio, 1))),
            0px
        );
    place-self: center;
}

//
@mixin centered-with-offset {
    @include centered-self("translate(round(nearest, var(--cs-drag-x, 0px), calc(1px / var(--pixel-ratio, 1))), round(nearest, var(--cs-drag-y, 0px), calc(1px / var(--pixel-ratio, 1))))");
}

//
@mixin use-inset {
    inset: var(--cs-inset-y, 0px) auto auto var(--cs-inset-x, 0px);
}



//
@mixin use_dvp {
    & { --avi: 100dvmin; --avb: 100dvmax; };
    @media (orientation: portrait)  { --avi: 100dvi; --avb: 100dvb; };
    @media (orientation: landscape) { --avi: 100dvb; --avb: 100dvi; };

    //
    & {
        --vp-i-size: var(--avi, 100dvmin);
        --vp-b-size: var(--avb, 100dvmax);
    }
}

//
@mixin use_lvp {
    & { --avi: 100lvmin; --avb: 100lvmax; };
    @media (orientation: portrait)  { --avi: 100lvi; --avb: 100lvb; };
    @media (orientation: landscape) { --avi: 100lvb; --avb: 100lvi; };

    //
    & {
        --vp-i-size: var(--avi, 100lvmin);
        --vp-b-size: var(--avb, 100lvmax);
    }
}

//
@mixin vp-vars {
    @include use_dvp();
    @media (display-mode: fullscreen) or (display-mode: standalone) { @include use_lvp(); };
    @at-root :fullscreen & { @include use_lvp(); };

    //
    @media (display-mode: fullscreen) or (display-mode: standalone) {
        --vp-i-size: var(--avail-width , 100dvmin);
        --vp-b-size: var(--avail-height, 100dvmax);
        //--vp-i-size: min(var(--avail-width , 100dvmin), var(--avi, 100dvmin));
        //--vp-b-size: min(var(--avail-height, 100dvmax), var(--avb, 100dvmax));
    };

    //
    @at-root :fullscreen & {
        --vp-i-size: var(--avail-width , 100dvmin);
        --vp-b-size: var(--avail-height, 100dvmax);
        //--vp-i-size: min(var(--avail-width , 100dvmin), var(--avi, 100dvmin));
        //--vp-b-size: min(var(--avail-height, 100dvmax), var(--avb, 100dvmax));
    };
};

//
@mixin fit-viewport {
    @include vp-vars;

    //
                                  & { inline-size: var(--vp-i-size, 100lvi); block-size: var(--vp-b-size, 100lvb); };
    @media (orientation: portrait)  { inline-size: var(--vp-i-size, 100lvi); block-size: var(--vp-b-size, 100lvb); };
    @media (orientation: landscape) { inline-size: var(--vp-b-size, 100lvi); block-size: var(--vp-i-size, 100lvb); };

    //
                                  & { max-inline-size: var(--vp-i-size, 100lvi); max-block-size: var(--vp-b-size, 100lvb); };
    @media (orientation: portrait)  { max-inline-size: var(--vp-i-size, 100lvi); max-block-size: var(--vp-b-size, 100lvb); };
    @media (orientation: landscape) { max-inline-size: var(--vp-b-size, 100lvi); max-block-size: var(--vp-i-size, 100lvb); };
};

//
@layer ux-agate {

    //
    @media screen {

        //
        :root, :host, :scope, :where(body) {
            pointer-events: auto;

            //
            transition-behavior: allow-discrete;
            interpolate-size: allow-keywords;
            content-visibility: auto;
            
            //
            --keyboard-inset-bottom: calc(max(env(keyboard-inset-bottom, 0px), 0px) / max(var(--zoom, 1), 0.125));
            --keyboard-inset-height: calc(max(env(keyboard-inset-height, 0px), 0px) / max(var(--zoom, 1), 0.125));
        }

        //
        :root, :where(html) {
            translate: 0px 0px !important;
            transform: none !important;
            margin: 0px !important;
            padding: 0px !important;
            border: none 0px transparent !important;
            outline: none 0px transparent !important;

            //
            background-color: transparent;
            container-type: normal;
            container-name: html root;
            contain: none;
            overflow: visible;
            position: fixed;
            inset: 0px;
            inset-block-end: auto;

            //
            min-inline-size: 100dvi;
            min-block-size: 100dvb;

            //
            inline-size: max-content;
            block-size: max-content;

            //
            max-inline-size: none;
            max-block-size: none;

            //
            place-content: start;
            place-items: start;
            place-self: start;

            //
            line-height: 0;
            flex-direction: column;
            display: flex;
        };

        //
        :where(body) {

            //
            & {
                translate: 0px 0px !important;
                transform: none !important;
                margin: 0px !important;

                //
                font-size: 0.9rem;

                //
                overflow: visible;
                position: relative;
                pointer-events: auto;
                inset: 0px;

                //
                display: inline flex;
                place-content: start;
                place-items: start;
                place-self: start;

                //
                background-color: var(--theme-base-color, transparent);

                // if needs viewport
                container-name: body;
                container-type: normal;
                contain: none;

                //
                min-inline-size: 100dvi;
                min-block-size: 100dvb;

                //
                inline-size: 100%;
                block-size: 100%;
            }

            //
            & > :where(*) {
                display: grid;
                place-self: safe center;
                grid-column: 1 / 1 span;
                grid-row: 1 / 1 span;
            }
        }

        //
        ui-frame, ui-modal, .ui-grid-item
        {
            & {
                isolation: isolate;
                content-visibility: auto;
                transform-origin: 50% 50%;
                transform: 
                    translate3d(
                        round(nearest, var(--translate-x, 0%), calc(1px / var(--pixel-ratio, 1))), 
                        round(nearest, var(--translate-y, 0%), calc(1px / var(--pixel-ratio, 1)))
                        , 0) 
                    scale3d(var(--scale, 1), var(--scale, 1), var(--scale, 1));
                translate: 0% 0% 0%;
                opacity: var(--opacity, 1);
                rotate: 0deg;
                scale: 1;

                //
                --opacity: 1;
                --scale: 1;
                --rotate: 0deg;
                --translate-x: 0%;
                --translate-y: 0%;
            };
        };

        //
        ui-orientbox {
            @include compute_os_conditions;
            @include compute_cs_size_to_os;
            @include compute_from_os_to_cs;

            //
            & {
                --cs-size-x: 100cqi;
                --cs-size-y: 100cqb;

                //
                position: relative;
                container-type: size !important;
                contain: strict !important;
                background-color: transparent;
                inset: 0px;

                //
                grid-column: 1 / -1;
                grid-row: 1 / -1;
                place-self: start;

                //
                min-inline-size: 1px;
                min-block-size: 1px;
                inline-size: 100%;
                block-size: 100%;
                max-inline-size: 100%;
                max-block-size: 100%;

                //
                zoom: max(var(--zoom, 1), 0.125);
                font-size: 16px;

                //
                pointer-events: none;

                //
                writing-mode: horizontal-tb !important;
                direction: ltr !important;
            }

            // by default, won't support rtl/vertical
            /*:where(*) {
                writing-mode: inherit;
                direction: inherit;
            }*/

            //
            & {
                //
                --zoom: max(var(--scaling, 1), 0.125);
                --zpx: calc(1px / max(var(--zoom, 1), 0.125));
                --ppx: calc(1px / max(var(--pixel-ratio, 1), 0.125));
            }

            //
            & > :where(*), 
            & :where(ui-frame, .u2-grid-item, ui-modal)
            {
                @include compute_os_conditions;
                @include compute_cs_size_to_os;
                @include compute_from_os_to_cs;
            }

            //
            .center-self {
                @include use-inset;
                @include centered-with-offset();
            }

            //
            .fixed { @include use-inset; position: fixed !important; }
            .absolute { @include use-inset; position: absolute !important; }
        }

        //
        :root, :where(html) {
            background-color: transparent;
            container-type: size;
            container-name: html root !important;
            contain: none;
            overflow: visible;
            position: fixed;
            inset: 0px;
            inset-block-end: auto;
        }

        //
        :where(body) {
            @include fit-viewport();

            //
            & {
                overflow: visible;
                position: relative !important;
                background-color: transparent;
                inset: auto !important;
                inset-block-end: max(env(titlebar-area-height, 0px), 0px) !important;
                container-type: normal;
                place-content: start;
                place-items: start;
                place-self: start;
                contain: none;
            }

            //
            & {
                --hide-nav-fact: 0px; // if immersive
                //--hide-nav-fact: 3rem; //navbar factor
            }

            //
            & {
                // according of status-bar area (default)
                --hide-cutout-fact: clamp(0px, max(
                    max(
                        env(safe-area-inset-top, 0px),
                        env(safe-area-inset-left, 0px)
                    ),
                    max(
                        env(safe-area-inset-right, 0px),
                        env(safe-area-inset-bottom, 0px)
                    )
                ), 2rem);

                // hide any status bars when possible
                --hide-status-fact: clamp(0px, max(
                    max(
                        env(safe-area-inset-top, 0px),
                        env(safe-area-inset-left, 0px)
                    ),
                    max(
                        env(safe-area-inset-right, 0px),
                        env(safe-area-inset-bottom, 0px)
                    )
                ), 2rem);
            };

            //
            @media (display-mode: browser) {
                @at-root :not(:fullscreen) & {
                    --hide-cutout-fact: 0px; // may not hidden
                    --hide-status-fact: 0px; // practically always hidden
                }
            }

            //
            @media (display-mode: fullscreen) or (display-mode: window-controls-overlay) {
                --hide-cutout-fact: 0px; // may not hidden
                --hide-status-fact: 0px; // practically always hidden
            };

            //
            @at-root :fullscreen & {
                & { --hide-status-fact: 0px; }; // practically always hidden
                //@media not ((hover: none) and (pointer: coarse)) {
                    & { --hide-cutout-fact: 0px; }; // fix in desktop
                //};
            };

            //
            #viewport, #background {

                // apply orientation modifiers
                @media (orientation: portrait)  {
                    inset-block-end: clamp(
                        min(var(--hide-cutout-fact, 0px) , var(--hide-status-fact, 0px)),
                        calc(var(--hide-cutout-fact, 0px) + var(--hide-status-fact, 0px)),
                        max(var(--hide-cutout-fact, 0px) , var(--hide-status-fact, 0px))
                    ) !important;
                };
    
                //
                @media (orientation: landscape) {
                    & {
                        inset-block-end : var(--hide-status-fact, 0px) !important;
                        inset-inline-start: auto !important;
                    };
    
                    //
                    & {
                        inset-inline-end: var(--hide-cutout-fact, 0px) !important;
                    };
    
                    //
                    @container root style(--secondary: 0) {
                        inset-inline-end: var(--hide-cutout-fact, 0px) !important;
                    };
    
                    //
                    @container root style(--secondary: 1) {
                        inset-inline-end: var(--hide-nav-fact, 0px) !important;
                    };
                };
                
            };
        };

        //
        .native-portrait-optimized {
            @include native-optimized-swap-in-portrait;
        };

    };

};
