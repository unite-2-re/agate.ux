/* // note about counter-clock-wise from portrait
export const orientationNumberMap = {
    "portrait-primary": 0, // as 0deg, aka. 360deg
    "landscape-primary": 1, // as -90deg, aka. 270deg
    "portrait-secondary": 2, // as -180deg, aka. 180deg
    "landscape-secondary": 3 // as -270deg, aka. 90deg
}
*/

/* // also from landscape basis (by counter-clock-wise)
export const orientationNumberMap = {
    "landscape-primary": 0, // as 0deg, aka. 360deg
    "portrait-secondary": 1, // as -90deg, aka. 270deg
    "landscape-secondary": 2 // as -180deg, aka. 180deg
    "portrait-primary": 3, // as -270deg, aka. 90deg
}
*/



/* //orient coordinate swap (if counter-clock-size)
    0: [ x,  y],
    1: [ y, -x],
    2: [-x, -y],
    3: [-y,  x]
*/

/* //orient coordinate swap (if clock-size)
    0: [ x,  y],
    1: [-y,  x], // swapped
    2: [-x, -y],
    3: [ y, -x]  // swapped
*/



//
@use "LogicFb" as flg;
@use "LogicSign" as slg;

//
@mixin compute_os_conditions {
    // reversion condition
    @supports (opacity: sign(0.5)) {
        --in-rev-cond-x: calc(1 - #{slg.lor(slg.eq(var(--orient, 0), 0), slg.eq(var(--orient, 0), 1))} );
        --in-rev-cond-y: calc(1 - #{slg.lor(slg.eq(var(--orient, 0), 0), slg.eq(var(--orient, 0), 3))} );
    }

    // reversion condition (alt)
    @supports not (opacity: sign(0.5)){
        --in-rev-cond-x: calc(1 - #{flg.lor(flg.eq(var(--orient, 0), 0), flg.eq(var(--orient, 0), 1))} );
        --in-rev-cond-y: calc(1 - #{flg.lor(flg.eq(var(--orient, 0), 0), flg.eq(var(--orient, 0), 3))} );
    }

    //
    & { // compute swap condition
        --in-swap-cond: rem(var(--orient, 0), 2); // for coordinate swap condition

        // compute as negate coefficient
        --in-rev-vx: calc(var(--in-rev-cond-x, 1) * -2 + 1);
        --in-rev-vy: calc(var(--in-rev-cond-y, 1) * -2 + 1);
    }
}

//
@mixin native-optimized-swap-in-portrait {
    & { --in-swap-cond: 0; };
    @media (orientation: portrait) { --in-swap-cond: 0; };
    @media (orientation: landscape) { --in-swap-cond: 1; };
}

//
@mixin compute_os_size_to_cs {
    // size swapping
    & { //
        --cs-size-x: #{slg.mix(var(--os-size-x, 100cqb), var(--os-size-y, 100cqi), var(--in-swap-cond, 0))};
        --cs-size-y: #{slg.mix(var(--os-size-y, 100cqi), var(--os-size-x, 100cqb), var(--in-swap-cond, 0))};

        //
        --cs-self-size-x: #{slg.mix(var(--os-self-size-y, 100cqb), var(--os-self-size-x, 100cqi), var(--in-swap-cond, 0))};
        --cs-self-size-y: #{slg.mix(var(--os-self-size-x, 100cqi), var(--os-self-size-y, 100cqb), var(--in-swap-cond, 0))};
    }
}

//
@mixin compute_cs_size_to_os {
    // size swapping
    & { //
        --os-size-x: #{slg.mix(var(--cs-size-x, 100cqb), var(--cs-size-y, 100cqi), var(--in-swap-cond, 0))};
        --os-size-y: #{slg.mix(var(--cs-size-y, 100cqi), var(--cs-size-x, 100cqb), var(--in-swap-cond, 0))};

        //
        --os-self-size-x: #{slg.mix(var(--cs-self-size-y, 100cqb), var(--cs-self-size-x, 100cqi), var(--in-swap-cond, 0))};
        --os-self-size-y: #{slg.mix(var(--cs-self-size-x, 100cqi), var(--cs-self-size-y, 100cqb), var(--in-swap-cond, 0))};
    }
}



// conversion from virtual space to client space by orientation
@mixin compute_from_os_to_cs {

    //
    & { // component swap condition
        --in-inset-x: #{slg.mix(var(--os-inset-x, 0px), var(--os-inset-y, 0px), var(--in-swap-cond, 0))};
        --in-inset-y: #{slg.mix(var(--os-inset-y, 0px), var(--os-inset-x, 0px), var(--in-swap-cond, 0))};

        //
        --in-drag-x: #{slg.mix(var(--os-drag-x, 0px), var(--os-drag-y, 0px), var(--in-swap-cond, 0))};
        --in-drag-y: #{slg.mix(var(--os-drag-y, 0px), var(--os-drag-x, 0px), var(--in-swap-cond, 0))};
    }

    // as alternative, you can swap before with os-size
    & { // inset position with reverse
        --cs-inset-x: #{slg.mix(var(--in-inset-x, 0px), calc(var(--cs-size-x, 100cqi) - var(--in-inset-x, 0px)), var(--in-rev-cond-x, 0))};
        --cs-inset-y: #{slg.mix(var(--in-inset-y, 0px), calc(var(--cs-size-y, 100cqb) - var(--in-inset-y, 0px)), var(--in-rev-cond-y, 0))};

        // drag offset with reversion
        --cs-drag-x: calc(var(--in-drag-x, 0px) * var(--in-rev-vx, 1));
        --cs-drag-y: calc(var(--in-drag-y, 0px) * var(--in-rev-vy, 1));
    }

}

// conversion from client space to virtual space by orientation
@mixin compute_from_cs_to_os {

    // as alternative, you can swap with os-size after
    & { // component swap condition
        --in-inset-x: #{slg.mix(var(--cs-inset-x, 0px), calc(var(--cs-size-x, 100cqi) - var(--cs-inset-x, 0px)), var(--in-rev-cond-x, 0))};
        --in-inset-y: #{slg.mix(var(--cs-inset-y, 0px), calc(var(--cs-size-y, 100cqi) - var(--cs-inset-y, 0px)), var(--in-rev-cond-y, 0))};

        //
        --in-drag-x: calc(var(--cs-drag-x, 0px) * var(--in-rev-vx, 1));
        --in-drag-y: calc(var(--cs-drag-y, 0px) * var(--in-rev-vy, 1));
    }

    // reverse for orientation space
    & {
        --os-inset-x: #{slg.mix(var(--in-inset-x, 0px), var(--in-inset-y, 0px), var(--in-swap-cond, 0))};
        --os-inset-y: #{slg.mix(var(--in-inset-y, 0px), var(--in-inset-x, 0px), var(--in-swap-cond, 0))};

        //
        --os-drag-x: #{slg.mix(var(--in-drag-y, 0px), var(--in-drag-x, 0px), var(--in-swap-cond, 0))};
        --os-drag-y: #{slg.mix(var(--in-drag-x, 0px), var(--in-drag-y, 0px), var(--in-swap-cond, 0))};
    }

}



// relative from main orientation
// for inline/block layouts
// rotate layout by clock-wise
// also, only for LTR layouts
@mixin prop-0deg   { --wm: horizontal-tb; --dir: ltr; --rot: 0deg; --i-rot: 0deg; } // default
@mixin prop-90deg  { --wm: vertical-rl;   --dir: ltr; --rot: 0deg; --i-rot: 0deg; }
@mixin prop-180deg { --wm: horizontal-tb; --dir: ltr; --rot: 180deg; --i-rot: 180deg; }
@mixin prop-270deg {
                                        & { --wm: vertical-lr; --dir: rtl; --rot: 0deg; --i-rot: 180deg; }
    @supports(writing-mode: sideways-lr)  { --wm: sideways-lr; --dir: ltr; --rot: 0deg; --i-rot: 0deg; }
}

// in client-space, depends of writing-mode...
@mixin portrait-size {
                                    & { --cqi: 100cqi; --cqb: 100cqb; }
    @media (orientation: portrait)    { --cqi: 100cqi; --cqb: 100cqb; }
    @media (orientation: landscape)   { --cqi: 100cqb; --cqb: 100cqi; }
}

// in client-space, depends of writing-mode...
@mixin landscape-size {
                                    & { --cqi: 100cqi; --cqb: 100cqb; }
    @media (orientation: landscape)   { --cqi: 100cqi; --cqb: 100cqb; }
    @media (orientation: portrait)    { --cqi: 100cqb; --cqb: 100cqi; }
}



//
@mixin init-os-size-by-native {
    --os-size-x: var(--cqi, 100cqi);
    --os-size-y: var(--cqb, 100cqb);
}

// in client-space, without writing-mode...
@mixin init-cs-size {
    --cs-size-x: 100cqw; //100cqi
    --cs-size-y: 100cqh; //100cqb
}



//
@mixin centered-self($transforms: null) {
    transform-origin: 0% 0%;
    transform: translate(calc(var(--translate-x, 0px) - 50%), calc(var(--translate-y, 0px) - 50%)) #{$transforms};
    place-self: center;
}

//
@mixin centered-with-offset {
    @include centered-self("translate(var(--cs-drag-x, 0px), var(--cs-drag-y, 0px))");
}

//
@mixin use-inset {
    inset: var(--cs-inset-y, 0px) auto auto var(--cs-inset-x, 0px);
}



//
@mixin vp-vars {
    & { --avi: 100dvmin; --avb: 100dvmax; };
    @media (orientation: portrait) { --avi: 100dvi; --avb: 100dvb; };
    @media (orientation: landscape) { --avi: 100dvb; --avb: 100dvi; };

    //
    & {
        --vp-i-size: var(--avi, 100dvmin);
        --vp-b-size: var(--avb, 100dvmax);
    }

    //
    @media screen and ((display-mode: fullscreen) or (display-mode: standalone)) {
        --vp-i-size: min(var(--avail-width, 100dvi), var(--avi, 100dvmin));
        --vp-b-size: min(var(--avail-height, 100dvb), var(--avb, 100dvmax));
    }

    //
    @at-root :fullscreen & {
        --vp-i-size: min(var(--avail-width, 100dvi), var(--avi, 100dvmin));
        --vp-b-size: min(var(--avail-height, 100dvb), var(--avb, 100dvmax));
    }
};

//
@mixin fit-viewport {
    @include vp-vars;

    //
    & { inline-size: min(var(--vp-i-size, 100dvmin), 100dvmin); block-size: min(var(--vp-b-size, 100dvmax), 100dvmax); max-inline-size: min(var(--vp-i-size, 100dvmin), 100dvmin); max-block-size: min(var(--vp-b-size, 100dvmax), 100dvmax); }
    @media (orientation: portrait) { inline-size: min(var(--vp-i-size, 100dvi), 100dvi); block-size: min(var(--vp-b-size, 100dvb), 100dvb); max-inline-size: min(var(--vp-i-size, 100dvi), 100dvi); max-block-size: min(var(--vp-b-size, 100dvb), 100dvb); };
    @media (orientation: landscape) { inline-size: min(var(--vp-b-size, 100dvi), 100dvi); block-size: min(var(--vp-i-size, 100dvb), 100dvb); max-inline-size: min(var(--vp-b-size, 100dvi), 100dvi); max-block-size: min(var(--vp-i-size, 100dvb), 100dvb); };
};

//
@layer ux-agate {

    //
    ui-orientbox {
        @include compute_os_conditions;
        @include compute_cs_size_to_os;
        @include compute_from_os_to_cs;

        //
        & {
            --cs-size-x: 100cqi;
            --cs-size-y: 100cqb;

            //
            position: relative;
            container-type: size !important;
            contain: strict !important;
            background-color: transparent;

            //
            grid-column: 1 / -1;
            grid-row: 1 / -1;
            place-self: center;

            //
            min-inline-size: 1px;
            min-block-size: 1px;
            inline-size: 100%;
            block-size: 100%;
            max-inline-size: 100%;
            max-block-size: 100%;

            //
            inset: 0px;

            //
            zoom: max(var(--zoom, 1), 0.125);
            font-size: 16px;

            //
            pointer-events: none;
        }

        //
        & {
            //
            --zoom: max(var(--scaling, 1), 0.125);
            --zpx: calc(1px / max(var(--zoom, 1), 0.125));
            --ppx: calc(1px / max(var(--pixel-ratio, 1), 0.125));
        }

        //
        :where(*) {
            @include compute_os_conditions;
            @include compute_cs_size_to_os;
            @include compute_from_os_to_cs;
        }

        //
        .center-self {
            @include use-inset;
            @include centered-with-offset();
        }

        //
        .fixed { @include use-inset; position: fixed !important; }
        .absolute { @include use-inset; position: absolute !important; }
    }

    //
    :where(body) {
        @include fit-viewport();
    }

    //
    .native-portrait-optimized {
        @include native-optimized-swap-in-portrait;
    }

}
